package server

import (
	"github.com/julienschmidt/httprouter"
	"github.com/ory-am/hydra/client"
	"github.com/ory-am/hydra/config"
	"github.com/ory-am/hydra/internal"
	"github.com/ory-am/hydra/oauth2"
	"github.com/ory-am/hydra/jwk"
	"github.com/ory-am/hydra/connection"
	"github.com/ory-am/hydra/policy"
	"github.com/ory-am/hydra/pkg"
	"github.com/ory-am/fosite"
	"github.com/ory-am/ladon"
	"github.com/Sirupsen/logrus"
	"github.com/ory-am/hydra/warden"
	"github.com/ory-am/fosite/handler/core"
	"github.com/ory-am/hydra/factory"
)

type Handler struct {
	Clients     *client.Handler
	Connections *connection.Handler
	Keys        *jwk.Handler
	OAuth2      *oauth2.Handler
	Policy      *policy.Handler
}

func (h *Handler) Start(c *config.Config, router *httprouter.Router) {
	ctx := c.Context()

	// Set up warden
	clientsManager := client.NewManager(c)
	internal.InjectFositeStore(c, clientsManager)
	ctx.Warden = &warden.LocalWarden{
		Warden: &ladon.Ladon{
			Manager: ctx.LadonManager,
		},
		TokenValidator: &core.CoreValidator{
			AccessTokenStrategy: ctx.FositeStrategy,
			AccessTokenStorage: ctx.FositeStore,
		},
		Issuer: c.Issuer,
	}

	// Set up handlers
	h.Clients = client.NewHandler(c, router, clientsManager)
	h.Keys = factory.NewJWKHandler(c, router)
	h.Connections = connection.NewHandler(c, router)
	h.Policy = policy.NewHandler(c, router)
	h.OAuth2 = internal.NewOAuth2Handler(c, router, h.Keys.Manager)

	// Create root account if new install
	h.createRootIfNewInstall(c)
}

func (h *Handler) createRootIfNewInstall(c *config.Config) {
	ctx := c.Context()

	clients, err := h.Clients.Manager.GetClients()
	pkg.Must(err, "Could not fetch client list: %s", err)
	if len(clients) != 0 {
		return
	}

	rs, err := pkg.GenerateSecret(16)
	pkg.Must(err, "Could notgenerate secret because %s", err)
	secret := []byte(string(rs))

	logrus.Warn("No clients were found. Creating a temporary root client...")
	root := &fosite.DefaultClient{
		Name:          "This temporary client is generated by hydra and is granted all of hydra's administrative privileges. It must be removed when everything is set up.",
		GrantTypes:    []string{"client_credentials"},
		ResponseTypes: []string{"token"},
		GrantedScopes: []string{"hydra", "core"},
		Secret:        secret,
	}

	err = h.Clients.Manager.CreateClient(root)
	pkg.Must(err, "Could not create temporary root because %s", err)
	err = ctx.LadonManager.Create(&ladon.DefaultPolicy{
		Description: "This is a policy created by hydra and issued to the first client. It grants all of hydra's administrative privileges to the client and enables the client_credentials response type.",
		Subjects:    []string{root.GetID()},
		Effect:      ladon.AllowAccess,
		Resources:   []string{"rn:hydra:<.*>"},
		Actions:     []string{"<.*>"},
	})
	pkg.Must(err, "Could not create admin policy because %s", err)

	c.ClientID = root.ID
	c.ClientSecret = string(secret)

	logrus.Warn("Temporary root client created.")
	logrus.Warnf("client_id: %s", root.GetID())
	logrus.Warnf("client_secret: %s", string(secret))
	logrus.Warn("The root client must be removed in production. The root's credentials could be accidentally logged.")
}